{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, trace, isSpanContextValid, Span } from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport type { WinstonInstrumentationConfig } from './types';\nimport type {\n  Winston2LogMethod,\n  Winston2LoggerModule,\n  Winston3ConfigureMethod,\n  Winston3LogMethod,\n  Winston3Logger,\n} from './internal-types';\nimport { VERSION } from './version';\n\nconst winston3Versions = ['>=3 <4'];\nconst winstonPre3Versions = ['>=1 <3'];\n\nexport class WinstonInstrumentation extends InstrumentationBase {\n  constructor(config: WinstonInstrumentationConfig = {}) {\n    super('@opentelemetry/instrumentation-winston', VERSION, config);\n  }\n\n  protected init() {\n    const winstons3instrumentationNodeModuleDefinition =\n      new InstrumentationNodeModuleDefinition<{}>(\n        'winston',\n        winston3Versions,\n        moduleExports => moduleExports,\n        () => {},\n        [\n          new InstrumentationNodeModuleFile<Winston3Logger>(\n            'winston/lib/winston/logger.js',\n            winston3Versions,\n            (logger, moduleVersion) => {\n              this._diag.debug(`Applying patch for winston@${moduleVersion}`);\n              if (isWrapped(logger.prototype['write'])) {\n                this._unwrap(logger.prototype, 'write');\n              }\n              this._wrap(logger.prototype, 'write', this._getPatchedWrite());\n\n              // Wrap configure\n              if (isWrapped(logger.prototype['configure'])) {\n                this._unwrap(logger.prototype, 'configure');\n              }\n              this._wrap(\n                logger.prototype,\n                'configure',\n                this._getPatchedConfigure()\n              );\n\n              return logger;\n            },\n            (logger, moduleVersion) => {\n              if (logger === undefined) return;\n              this._diag.debug(`Removing patch for winston@${moduleVersion}`);\n              this._unwrap(logger.prototype, 'write');\n              this._unwrap(logger.prototype, 'configure');\n            }\n          ),\n        ]\n      );\n\n    const winstons2instrumentationNodeModuleDefinition =\n      new InstrumentationNodeModuleDefinition<{}>(\n        'winston',\n        winstonPre3Versions,\n        moduleExports => moduleExports,\n        () => {},\n        [\n          new InstrumentationNodeModuleFile<Winston2LoggerModule>(\n            'winston/lib/winston/logger.js',\n            winstonPre3Versions,\n            (fileExports, moduleVersion) => {\n              this._diag.debug(`Applying patch for winston@${moduleVersion}`);\n              const proto = fileExports.Logger.prototype;\n\n              if (isWrapped(proto.log)) {\n                this._unwrap(proto, 'log');\n              }\n              this._wrap(proto, 'log', this._getPatchedLog());\n\n              return fileExports;\n            },\n            (fileExports, moduleVersion) => {\n              if (fileExports === undefined) return;\n              this._diag.debug(`Removing patch for winston@${moduleVersion}`);\n              this._unwrap(fileExports.Logger.prototype, 'log');\n            }\n          ),\n        ]\n      );\n    return [\n      winstons3instrumentationNodeModuleDefinition,\n      winstons2instrumentationNodeModuleDefinition,\n    ];\n  }\n\n  override getConfig(): WinstonInstrumentationConfig {\n    return this._config;\n  }\n\n  override setConfig(config: WinstonInstrumentationConfig) {\n    this._config = config;\n  }\n\n  private _callHook(span: Span, record: Record<string, string>) {\n    const hook = this.getConfig().logHook;\n\n    if (!hook) {\n      return;\n    }\n\n    safeExecuteInTheMiddle(\n      () => hook(span, record),\n      err => {\n        if (err) {\n          this._diag.error('error calling logHook', err);\n        }\n      },\n      true\n    );\n  }\n\n  private _getPatchedWrite() {\n    return (original: Winston3LogMethod) => {\n      const instrumentation = this;\n      return function patchedWrite(\n        this: never,\n        ...args: Parameters<typeof original>\n      ) {\n        const record = args[0];\n        instrumentation._handleLogCorrelation(record);\n        return original.apply(this, args);\n      };\n    };\n  }\n\n  private _getPatchedLog() {\n    return (original: Winston2LogMethod) => {\n      const instrumentation = this;\n      return function patchedLog(\n        this: never,\n        ...args: Parameters<typeof original>\n      ) {\n        const record: Record<string, any> = {};\n        instrumentation._handleLogCorrelation(record);\n        // Inject in metadata argument\n        let isDataInjected = false;\n        for (let i = args.length - 1; i >= 0; i--) {\n          if (typeof args[i] === 'object') {\n            args[i] = Object.assign(args[i], record);\n            isDataInjected = true;\n            break;\n          }\n        }\n        if (!isDataInjected) {\n          const insertAt =\n            typeof args[args.length - 1] === 'function'\n              ? args.length - 1\n              : args.length;\n\n          args.splice(insertAt, 0, record);\n        }\n\n        return original.apply(this, args);\n      };\n    };\n  }\n\n  private _getPatchedConfigure() {\n    return (original: Winston3ConfigureMethod) => {\n      const instrumentation = this;\n      return function patchedConfigure(\n        this: never,\n        ...args: Parameters<typeof original>\n      ) {\n        const config = instrumentation.getConfig();\n        if (!config.disableLogSending) {\n          if (args && args.length > 0) {\n            // Try to load Winston transport\n            try {\n              const {\n                OpenTelemetryTransportV3,\n              } = require('@opentelemetry/winston-transport');\n              const originalTransports = args[0].transports;\n              let newTransports = Array.isArray(originalTransports)\n                ? originalTransports\n                : [];\n              const openTelemetryTransport = new OpenTelemetryTransportV3();\n              if (originalTransports && !Array.isArray(originalTransports)) {\n                newTransports = [originalTransports];\n              }\n              newTransports.push(openTelemetryTransport);\n              args[0].transports = newTransports;\n            } catch (err) {\n              instrumentation._diag.warn(\n                'OpenTelemetry Winston transport is not available, log records will not be automatically sent.',\n                err\n              );\n            }\n          }\n        }\n        return original.apply(this, args);\n      };\n    };\n  }\n\n  private _handleLogCorrelation(record: Record<string, string>) {\n    if (!this.getConfig().disableLogCorrelation) {\n      const span = trace.getSpan(context.active());\n      if (span) {\n        const spanContext = span.spanContext();\n        if (isSpanContextValid(spanContext)) {\n          const fields = {\n            trace_id: spanContext.traceId,\n            span_id: spanContext.spanId,\n            trace_flags: `0${spanContext.traceFlags.toString(16)}`,\n          };\n          const enhancedRecord = Object.assign(record, fields);\n          this._callHook(span, enhancedRecord);\n          return enhancedRecord;\n        }\n      }\n    }\n    return record;\n  }\n}\n"]}